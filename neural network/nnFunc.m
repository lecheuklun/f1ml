function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 25-Jan-2021 15:30:20.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx10 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [1;0;0;0;0;2;2;0;0;2];
x1_step1.gain = [0.0869565217391304;2;2;2;2;1;1;0.666666666666667;2;1];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.4608066326881883334;1.7520211384569148727;1.0057364020365899826;-0.014262808973037399002;-0.834882517194037721;0.85981262302022043453;0.67898683957372729658;1.7880357287856001314;-2.4919916344667392138;1.1886777831155874718];
IW1_1 = [-1.7901972638848171471 -0.3555011528326338377 0.81445115930563738438 -0.65464139068952587053 0.10361943822619625044 -0.031389574154096037961 -0.74413006442259366224 -0.19744333000375013931 0.95228060609045317442 0.29562813778717522695;0.80938574644615945974 -1.3788721939695747221 0.7984123451264246718 1.4418312796155987598 -0.17102026096049782744 0.35656625825937438012 -0.11491774381695474272 -0.10852998970819310864 -1.1680272463164582675 -1.2314957536732913379;0.20882941984497246923 -0.96691829743048862689 -0.21121769569149689838 1.0640711061513870028 -0.9682215630952347718 1.2562168756276392845 -1.1927767486662419483 -1.3112785941600080264 -0.57110664638803909643 -0.74884755646181344613;-2.3803313319457513053 -1.0924128178705683201 -2.5505962382444855585 -1.8820304360795505616 0.39232909355545869667 -0.77729779596375359052 -0.79020164468401954405 0.92381343705085361417 0.89592569269878985505 -0.085458342235963255518;-0.70503032879688687373 0.60881350923314192514 -1.1330145891556149262 -1.984568384931087115 0.33218361804185525532 0.9025093345056651728 -0.13686283754089850762 -0.28003509429628498095 1.808337384138343662 -1.5614345247566550068;1.6951717913004666904 -0.53665324558923410692 0.0030704171496281629228 0.47694731752316510409 -0.026059847176715729422 0.96255036665992377287 -0.63382501274614966302 -0.27837302352557813379 -0.66958297038356973108 -0.91069932008669329804;0.24026687689515369151 -2.2597198737646859712 -0.35509598302290346084 -0.62795161471019478316 0.69208723570163643846 -0.50776060570177539155 0.41002484217771406616 -0.029316946867675948429 -0.013157847911070857938 -0.36854551481998870655;0.51921881192772501024 -1.2844910088145100602 0.33272324398238800613 0.32826181565648249183 -0.47385740415208194021 0.384961658867531753 1.0565853203166992724 -0.50928821604361751429 -1.3575983688027901675 0.22947184885147714484;-0.86538765324597954898 -0.13176747885235134961 0.67719178679323643877 -0.53000143657077902759 1.2074598140000634139 0.75281340567635635086 1.016013647595092273 -0.62422607452306688725 1.8072313756882862901 -0.82182054228266632201;-0.18625952283241828389 -2.0864942175552072534 -1.7053902891277199494 2.4207653689190724577 0.0021579317368051187387 0.29074675809747113631 -0.034611252079663930303 -1.9374985072276915687 0.58631067498892841527 0.65202461802314881645];

% Layer 2
b2 = 0.036723395122663107792;
LW2_1 = [-0.4318981610934099491 -0.69255443949351869204 -0.87088698317201285182 -0.20610294573364221216 -0.21823273611165916464 0.51175475164372841164 0.011351859221884030848 0.57016594122240460418 -0.49633712064334301051 -0.085505070919478232128];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0869565217391304;
y1_step1.xoffset = 1;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
